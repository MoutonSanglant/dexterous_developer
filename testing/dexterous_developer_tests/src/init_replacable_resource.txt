use bevy::prelude::{Component, Res, Resource, Startup, Update};
use bevy_dexterous_developer::*;
use serde::{Deserialize, Serialize};

fn update(text: Res<TextResource>) {
    let text = text.0.as_str();
    println!("Got: {text}");
}

fn startup() {
    println!("Press Enter to Progress, or type 'exit' to exit");
}

reloadable_scope!(reloadable(app) {
    app.add_systems(Startup, startup)
        .add_systems(Update, update)
        .init_replacable_resource::<TextResource>();
});

#[derive(Component, Serialize, Deserialize, Default)]
struct TextComponent(String);

impl ReplacableComponent for TextComponent {
    fn get_type_name() -> &'static str {
        "text_component"
    }
}

#[derive(Resource, Serialize, Deserialize)]
struct TextResource(String);

impl Default for TextResource {
    fn default() -> Self {
        Self("Resource Added".to_string())
    }
}

impl ReplacableResource for TextResource {
    fn get_type_name() -> &'static str {
        "text_resource"
    }
}
